class Solution {
    public static int nthLargest(int[] arr, int n) {
        if (n <= 0 || n > arr.length) {
            throw new IllegalArgumentException("Invalid n");
        }
        return quickSelect(arr, 0, arr.length - 1, arr.length - n);
    }

    private static int quickSelect(int[] arr, int left, int right, int k) {
        if (left == right) return arr[left];

        int pivotIndex = partition(arr, left, right);

        if (k == pivotIndex) {
            return arr[k];
        } else if (k < pivotIndex) {
            return quickSelect(arr, left, pivotIndex - 1, k);
        } else {
            return quickSelect(arr, pivotIndex + 1, right, k);
        }
    }

    private static int partition(int[] arr, int left, int right) {
        int pivot = arr[right];
        int i = left;

        for (int j = left; j < right; j++) {
            if (arr[j] <= pivot) {
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
                i++;
            }
        }
        int temp = arr[i];
        arr[i] = arr[right];
        arr[right] = temp;

        return i;
    }

    public static void main(String[] args) {
        int[] arr = {7, 2, 9, 4, 6};

        System.out.println(nthLargest(arr, 2)); // 7
        System.out.println(nthLargest(arr, 1)); // 9
        System.out.println(nthLargest(arr, 5)); // 2
    }
}
