#single buy and sell
class Solution {
    public int maxProfit(int[] prices) {
        if (prices == null || prices.length == 0) return 0;

        int minPrice = prices[0];  // Keep track of the lowest price so far
        int maxProfit = 0;

        for (int i = 1; i < prices.length; i++) {
            // Sell today: profit = prices[i] - minPrice
            maxProfit = Math.max(maxProfit, prices[i] - minPrice);

            // Update minPrice if we find a cheaper stock
            minPrice = Math.min(minPrice, prices[i]);
        }

        return maxProfit;
    }
}


## multiple buy and sell

class Solution {
    public int maxProfit(int[] prices) {
        if (prices == null || prices.length == 0) return 0;

        int maxProfit = 0;

        for (int i = 1; i < prices.length; i++) {
            // If today's price is higher than yesterday's, take the profit
            if (prices[i] > prices[i - 1]) {
                maxProfit += prices[i] - prices[i - 1];
            }
        }

        return maxProfit;
    }
}
