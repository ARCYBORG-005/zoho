import java.util.*;

public class NextPermutationBruteForce {
    
    public static void nextPermutation(int[] nums) {
        List<List<Integer>> permutations = new ArrayList<>();
        permute(nums, 0, permutations);

        // Convert nums[] to a list so we can compare easily
        List<Integer> current = new ArrayList<>();
        for (int n : nums) current.add(n);

        // Sort permutations lexicographically
        Collections.sort(permutations, (a, b) -> {
            for (int i = 0; i < a.size(); i++) {
                if (!a.get(i).equals(b.get(i))) {
                    return a.get(i) - b.get(i);
                }
            }
            return 0;
        });

        // Find index of current permutation
        int idx = 0;
        for (int i = 0; i < permutations.size(); i++) {
            if (permutations.get(i).equals(current)) {
                idx = i;
                break;
            }
        }

        // Get next permutation (or first if last one)
        List<Integer> next = permutations.get((idx + 1) % permutations.size());

        // Write back to nums[]
        for (int i = 0; i < nums.length; i++) {
            nums[i] = next.get(i);
        }
    }

    private static void permute(int[] nums, int start, List<List<Integer>> res) {
        if (start == nums.length) {
            List<Integer> list = new ArrayList<>();
            for (int n : nums) list.add(n);
            res.add(list);
            return;
        }

        for (int i = start; i < nums.length; i++) {
            swap(nums, i, start);
            permute(nums, start + 1, res);
            swap(nums, i, start); // backtrack
        }
    }

    private static void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

    // Test
    public static void main(String[] args) {
        int[] nums = {1, 2, 3};
        nextPermutation(nums);
        System.out.println(Arrays.toString(nums)); // Output: [1, 3, 2]
    }
}
