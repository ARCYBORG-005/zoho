import java.util.Arrays;

class Main {
    public static int[][] mergeintervals(int[][] intervals) {
        if (intervals == null || intervals.length == 0) {
            return new int[0][0];
        }
        int n = intervals.length;

        // Step 1: Sort by start time
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));

        int[][] temp = new int[n][2];
        int indx = 0;
        temp[indx] = intervals[0];

        // Step 2: Merge intervals
        for (int i = 1; i < n; i++) {
            if (intervals[i][0] <= temp[indx][1]) {
                temp[indx][1] = Math.max(temp[indx][1], intervals[i][1]);
            } else {
                indx++;
                temp[indx] = intervals[i];
            }
        }

        // Step 3: Copy merged result
        int[][] result = new int[indx + 1][2];
        for (int i = 0; i < result.length; i++) {
            result[i] = temp[i];
        }

        return result; // ← LeetCode style return
    }

    public static void main(String[] args) {
        int[][] intervals = {{1,3},{2,6},{8,10},{15,16}};
        int[][] merged = mergeintervals(intervals);

        System.out.println("Merged Intervals:");
        for (int i = 0; i < merged.length; i++) {
            System.out.print("[" + merged[i][0] + "," + merged[i][1] + "] ");
        }
    }
}
