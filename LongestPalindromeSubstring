public class LongestPalindromeSubstring {

    public static String longestPalindrome(String s) {
        if (s == null || s.length() < 1) return "";

        int start = 0, end = 0; // track best palindrome indices

        for (int i = 0; i < s.length(); i++) {
            // Odd-length palindrome (center at i)
            int len1 = expandFromCenter(s, i, i);

            // Even-length palindrome (center between i and i+1)
            int len2 = expandFromCenter(s, i, i + 1);

            // Take the longer one
            int len = Math.max(len1, len2);

            if (len > end - start) {
                start = i - (len - 1) / 2; // left boundary
                end = i + len / 2;         // right boundary
            }
        }

        return s.substring(start, end + 1);
    }

    // Expands while left/right characters are equal
    private static int expandFromCenter(String s, int left, int right) {
        while (left >= 0 && right < s.length() &&
               s.charAt(left) == s.charAt(right)) {
            left--;
            right++;
        }
        // length = right - left - 1 because loop overshoots
        return right - left - 1;
    }

    public static void main(String[] args) {
        System.out.println(longestPalindrome("babad"));   // "bab" or "aba"
        System.out.println(longestPalindrome("cbbd"));    // "bb"
        System.out.println(longestPalindrome("a"));       // "a"
        System.out.println(longestPalindrome("ac"));      // "a" or "c"
        System.out.println(longestPalindrome("aaaa"));    // "aaaa"
    }
}
